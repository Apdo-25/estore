generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  currency    String
  price       Float
  flag        Flag        @default(regular)
  imageUrl    String
  rating      Int         @default(1)
  ratingCount Int
  description String
  features    String[]
  salePrice   Float?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orders      Order[]
  reviews     Review[]
  payments    Payment[]
  CartItem    CartItem[]
  OrderItem   OrderItem[]

  @@map("products")
}

enum Flag {
  new
  on_sale
  regular
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  String
  firstName String
  lastName  String
  role      Role      @default(user)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  carts     Cart[]
  orders    Order[]
  reviews   Review[]
  addresses Address[]
  payments  Payment[]

  @@map("users")
}

enum Role {
  admin
  user
}

model Cart {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  items      CartItem[]
  totalPrice Float      @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cartItems")
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.ObjectId
  items     OrderItem[] // Relation to OrderItems instead of Products
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Product   Product?    @relation(fields: [productId], references: [id])
  productId String?     @db.ObjectId
  Payment   Payment[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  quantity  Int
  price     Float // Price at the time of order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orderItems")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  address   String
  city      String
  state     String
  country   String
  zip       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId

  @@map("payments")
}
